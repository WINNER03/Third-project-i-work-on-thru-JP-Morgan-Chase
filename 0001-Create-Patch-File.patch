From 57c8880fc1cfd70d6c9f1860d83251f992417fa7 Mon Sep 17 00:00:00 2001
From: WINNER03 <claudeadjanohoun@gmail.com>
Date: Fri, 24 Jul 2020 22:28:24 -0700
Subject: [PATCH] Create Patch File

---
 datafeed/server.py     |  6 +++---
 src/DataManipulator.ts | 35 +++++++++++++++++++++++++----------
 src/Graph.tsx          | 27 +++++++++++++++++----------
 3 files changed, 45 insertions(+), 23 deletions(-)

diff --git a/datafeed/server.py b/datafeed/server.py
index 2ffad43..c6fd924 100644
--- a/datafeed/server.py
+++ b/datafeed/server.py
@@ -214,7 +214,7 @@ def run(routes, host = '0.0.0.0', port = 8080):
     thread = threading.Thread(target = server.serve_forever)
     thread.daemon = True
     thread.start()
-    print 'HTTP server started on port 8080'
+    print ('HTTP server started on port 8080')
     while True:
         from time import sleep
         sleep(1)
@@ -274,7 +274,7 @@ class App(object):
         t1, bids1, asks1 = self._current_book_1.next()
         t2, bids2, asks2 = self._current_book_2.next()
         t = t1 if t1 > t2 else t2
-        print 'Query received @ t%s' % t
+        print ('Query received @ t%s' % t)
         return [{
             'id': x and x.get('id', None),
             'stock': 'ABC',
@@ -308,6 +308,6 @@ class App(object):
 
 if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
-        print "No data found, generating..."
+        print ("No data found, generating...")
         generate_csv()
     run(App())
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..93a3708 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,35 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number|undefined,
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverRespond: ServerRespond[]): Row[] {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond [0].top_bid.price)/2;
+    const priceDEF =(serverRespond[0].top_ask.price+ serverRespond [1].top_bid.price)/2;
+    const ratio = priceABC/priceDEF;
+    const upperBound = 1 + 0.05;
+    const lowerBound = 1 - 0.05;
+  
+    
+    return {
+      price_abc : priceABC,
+      price_def: priceDEF,
+        ratio,
+        timestamp: serverRespond[0].timestamp > serverRespond[1].timestamp?
+          serverRespond[0].timestamp > serverRespond[1].timestamp,
+        upper_bound:upperBound,
+        lower_bound:lowerBound,
+        trigger_alert:(ratio>upperBound || ratio < lowerBound) ? ratio : undefined,
+    
+    };
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..135af72 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -23,10 +23,14 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+
+      upper_bound:'float',
+      lower_bound:'float',
+      trigger_alert: 'float',
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +40,26 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
+      
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio","lower_bound","upper_bound","trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.27.0.windows.1

